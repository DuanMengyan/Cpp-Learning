#pragma once
#pragma execution_character_set("utf-8")


/*************************************************************************
> File Name: Chapter9.3.cpp
> Author: DMY
> Mail: dmy_email@163.com
> Created Time: 2018年11月9日 星期五
> Last edited time: 2018年11月9日 星期五
> Topic:C++Primer Chapter9.3 顺序容器操作
************************************************************************/

#include "header_include.h"

using namespace std;

//9.3 顺序容器操作
//Sequential Container Operations

//9.3.1 向顺序容器添加元素
void Fun_Adding_Elements_to_a_Sequential_Container()
{
	//向一个vector 、string 或 deque插入元素会是所有指向容器的迭代器、引用和指针失效

	//使用push_back

	//string str = "hello world";
	//str.push_back('!');			//等价于str += 's'

	//用一个对象初始化容器时，或将一个对象插入到容器中时，实际上放入到容器中的是对象值的一个拷贝
	//随后对容器中元素的任何改变不会影响到原始对象，反之亦然


	//使用push_back
	//list<int> ilist;
	//for (size_t ix = 0; ix != 4; ++ix)
	//	ilist.push_front(ix);

	//for (auto i : ilist)
	//{
	//	cout << i << "  ";
	//}
	
	//deque像vector一样提供了随机访问元素的能力，但它提供了vector所不支持的push_front。
	//deque保证在容器首尾进行插入和删除元素的操作都花费常数时间
	//与vector一样，在deque首尾之外的位置插入元素会很耗时


	//在容器中的特定位置添加元素
	//vector、deque、list和string都支持insert成员

	//插入范围内元素
	//迭代器表示要拷贝的范围，不能指向添加元素的目标容器
	list<int> ilist;
	vector<int>  v = { 1, 2, 3, 4 };
	auto i = ilist.insert(ilist.begin(), v.end() - 2, v.end());
	cout << *i << endl;
	
	//使用insert的返回值
	list<string> lst;

}

//9.3


//9.3


//9.3




int main()
{
	//9.3.1 向顺序容器添加元素
	Fun_Adding_Elements_to_a_Sequential_Container();

	return 0;
}